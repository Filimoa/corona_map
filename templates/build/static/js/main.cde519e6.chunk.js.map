{"version":3,"sources":["Assets/coronamap_logo.png","Components/SearchHeader/TripleButton.jsx","Components/SearchHeader/Index.jsx","Utils/intToDate.jsx","Components/Slider/Index.jsx","Utils/dateDiffInDays.js","Utils/getTodayStr.js","Components/Map/map-style.jsx","Utils/groupGeojson.js","Utils/getAsyncData.jsx","Components/Map/Index.jsx","Utils/filterQuarantine.js","Components/Legend/Item.jsx","Components/Legend/ItemLine.jsx","Components/Legend/menu_text.js","Components/Legend/Index.jsx","Utils/getDateStr.js","Components/StatePopup/Graph.jsx","Utils/getGraphData.js","Components/StatePopup/Index.jsx","Components/MapContainer/Index.jsx","Utils/useWindowDimension.jsx","App.js","Utils/checkIsDesktop.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchHeader","props","useState","buttonBackground1","setButtonBackground1","buttonBackground2","setButtonBackground2","buttonBackground3","setButtonBackground3","button_style","background","borderColor","color","className","type","onClick","setVal","ghost","style","shape","src","logo","setDisplayType","intToDate","days_int","result","Date","setDate","getDate","d","String","m","getMonth","getFullYear","DateSlider","intDate","setIntDate","max_val","date1","date2","a","b","utc1","UTC","utc2","Math","floor","dateDiffInDays","today","getTodayStr","sliderRailBackgroundColor","tipFormatter","int","date","toLocaleString","month","defaultValue","onChange","val","max","fillLayer","id","paint","property","stops","quarantineLayer","all_filter_criteria","pct","0","1","2","3","4","5","cases","tests","getAsyncData","url","fetch","headers","response","json","MainMap","data","setData","outlines","setOutlines","quarantineStatus","setQuarantineStatus","latitude","longitude","zoom","viewport","setViewport","useEffect","then","format_date","displayType","updatedData","Object","assign","featureCollection","accessor","filter_criteria","groupVar","x","group","key","min","parseInt","features","map","f","value","properties","groupGeojson","updatedOutlines","quarantineData","filterDate","stateDate","filterQuarantine","width","height","mapStyle","mapboxApiAccessToken","process","onViewportChange","event","e","interactiveLayerIds","Item","item_style","text","ItemLine","all_menu_text","heading","items","item1","item2","item3","item4","item5","Legend","menu_text","body","values","item","getDateStr","graph_titles","deaths","Graph","addDays","days","dateFormatter","graphData","console","log","start_date","i","date_str","entry","name","push","getGraphData","graph_title","forEach","dataKey","fill","StatePopup","doubling","headingTitle","dateInput","dateHeadingFormatter","footer","visible","isOpen","onCancel","close","bodyStyle","padding","state","bordered","size","column","title","label","MapContainer","chosenStateData","setChosenStateData","modalOpen","setModalOpen","legend_style","position","top","left","zindex","isDesktop","getWindowDimensions","window","innerWidth","innerHeight","App","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimension","checkIsDesktop","ReactGA","initialize","pageview","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cde519e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronamap_logo.d01c8164.png\";","import React, { useState } from \"react\";\nimport { Button } from \"antd\";\n\nimport \"./styles.css\";\nimport \"antd/dist/antd.css\";\n\nexport default function SearchHeader(props) {\n  // way better ways of doing this\n  const [buttonBackground1, setButtonBackground1] = useState(false);\n  const [buttonBackground2, setButtonBackground2] = useState(true);\n  const [buttonBackground3, setButtonBackground3] = useState(true);\n\n  const button_style = {\n    background: \"#FF8184\",\n    borderColor: \"#BE0005\",\n    color: \"black\"\n  };\n\n  // when button clicked change background / setState\n  function onButtonClick1() {\n    props.setVal(\"pct\");\n    setButtonBackground1(false);\n    setButtonBackground2(true);\n    setButtonBackground3(true);\n  }\n\n  function onButtonClick2() {\n    props.setVal(\"cases\");\n    setButtonBackground1(true);\n    setButtonBackground2(false);\n    setButtonBackground3(true);\n  }\n\n  function onButtonClick3() {\n    props.setVal(\"tests\");\n    setButtonBackground1(true);\n    setButtonBackground2(true);\n    setButtonBackground3(false);\n  }\n\n  return (\n    <div>\n      <div className=\"search-header\">\n        <Button\n          type=\"primary\"\n          onClick={onButtonClick1}\n          ghost={buttonBackground1}\n          className=\"button-first\"\n          style={button_style}\n          shape=\"round\"\n        >\n          Doubling Rate\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={onButtonClick2}\n          ghost={buttonBackground2}\n          className=\"button\"\n          style={button_style}\n          shape=\"round\"\n        >\n          Total Infections\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={onButtonClick3}\n          ghost={buttonBackground3}\n          className=\"button\"\n          style={button_style}\n          shape=\"round\"\n        >\n          Total Tests\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport TripleButton from \"./TripleButton\";\nimport logo from \"../../Assets/coronamap_logo.png\";\n\nimport \"./styles.css\";\n\nexport default function SearchHeader(props) {\n  return (\n    <div>\n      <img src={logo} className=\"logo\" />\n      <div className=\"search-header\">\n        <TripleButton setVal={props.setDisplayType} />\n      </div>\n    </div>\n  );\n}\n","const intDates = {\n  0: \"2020-3-4\",\n  1: \"2020-3-5\",\n  2: \"2020-3-6\",\n  3: \"2020-3-7\",\n  4: \"2020-3-8\",\n  5: \"2020-3-9\",\n  6: \"2020-3-10\",\n  7: \"2020-3-11\",\n  8: \"2020-3-12\",\n  9: \"2020-3-13\",\n  10: \"2020-3-14\",\n  11: \"2020-3-15\",\n  12: \"2020-3-16\",\n  13: \"2020-3-17\",\n  14: \"2020-3-18\",\n  15: \"2020-3-19\",\n  16: \"2020-3-20\",\n  17: \"2020-3-21\",\n  18: \"2020-3-22\",\n  19: \"2020-3-23\",\n  20: \"2020-3-24\",\n  21: \"2020-3-25\",\n  22: \"2020-3-26\",\n  23: \"2020-3-27\",\n  24: \"2020-3-28\",\n  25: \"2020-3-29\",\n  26: \"2020-3-30\",\n  27: \"2020-3-31\",\n  28: \"2020-4-1\",\n  29: \"2020-4-2\",\n  30: \"2020-4-3\",\n  31: \"2020-4-4\",\n  32: \"2020-4-5\"\n};\n\nexport default function intToDate(days_int) {\n  var result = new Date(\"2020-3-4\");\n  result.setDate(result.getDate() + days_int);\n\n  var d = String(result.getDate());\n  var m = String(result.getMonth() + 1);\n  var y = String(result.getFullYear());\n\n  return y + \"-\" + m + \"-\" + d;\n}\n","import React, { useState } from \"react\";\nimport { Slider } from \"antd\";\nimport intToDate from \"../../Utils/intToDate\";\nimport dateDiffInDays from \"../../Utils/dateDiffInDays\";\nimport getTodayStr from \"../../Utils/getTodayStr\";\n\nimport \"./styles.css\";\nimport \"antd/dist/antd.css\";\n\nexport default function DateSlider(props) {\n  const [intDate, setIntDate] = useState(20);\n\n  const slider_style = {\n    sliderRailBackgroundColor: \"black\"\n  };\n\n  // up to yesterday\n  const max_val = dateDiffInDays(\"2020-03-4\", getTodayStr());\n\n  function onSliderChange(val) {\n    setIntDate(val);\n    props.setDate(intToDate(intDate));\n  }\n\n  function tipFormatter(int) {\n    // slider is in integer units, need to display this as pretty date\n    const date = new Date(intToDate(int - 1));\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const day = String(date.getDate());\n\n    return month + \" \" + day;\n  }\n\n  return (\n    <div className=\"date-slider\">\n      <div className=\"heading\">Date</div>\n      <div className=\"slider\">\n        <Slider\n          style={slider_style}\n          tipFormatter={tipFormatter}\n          defaultValue={max_val}\n          onChange={onSliderChange}\n          max={max_val}\n        />\n      </div>\n    </div>\n  );\n}\n","const _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\n// a and b are javascript Date objects\nexport default function dateDiffInDays(date1, date2) {\n  const a = new Date(date1);\n  const b = new Date(date2);\n\n  // Discard the time and time-zone information.\n  const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n  return Math.floor((utc2 - utc1) / _MS_PER_DAY);\n}\n","export default function getTodayStr() {\n  var today = new Date();\n\n  var d = String(today.getDate());\n  var m = String(today.getMonth() + 1);\n  var y = String(today.getFullYear());\n\n  return y + \"-\" + m + \"-\" + d;\n}\n","export const fillLayer = {\n  id: \"state-layer\",\n  type: \"fill\",\n  paint: {\n    \"fill-color\": {\n      property: \"group\",\n      stops: [\n        [0, \"transparent\"],\n        [1, \" #f9a8a8\"],\n        [2, \"#d78686\"],\n        [3, \"#b66666\"],\n        [4, \"#954647\"],\n        [5, \"#74272a\"]\n      ]\n    },\n    \"fill-opacity\": 0.5\n  }\n};\n\nexport const quarantineLayer = {\n  id: \"point\",\n  type: \"line\",\n  paint: {\n    \"line-color\": {\n      property: \"group\",\n      stops: [\n        [0, \"transparent\"],\n        [1, \"transparent\"],\n        [2, \"black\"]\n      ]\n    },\n    // \"line-dasharray\": [2, 2],\n    \"line-width\": 3\n  }\n};\n","const all_filter_criteria = {\n  pct: {\n    0: [1000, 30],\n    1: [30, 10],\n    2: [10, 5],\n    3: [5, 3],\n    4: [3, 1],\n    5: [1, 0]\n  },\n  cases: {\n    0: [0, 1],\n    1: [1, 10],\n    2: [10, 100],\n    3: [100, 1000],\n    4: [1000, 5000],\n    5: [5000, 100000]\n  },\n  tests: {\n    0: [0, 1],\n    1: [1, 10],\n    2: [10, 100],\n    3: [100, 1000],\n    4: [1000, 5000],\n    5: [5000, 100000]\n  }\n};\n\nexport default function updatePercentiles(\n  featureCollection,\n  accessor,\n  displayType\n) {\n  const filter_criteria = all_filter_criteria[displayType];\n\n  function groupVar(x) {\n    var group = -1;\n\n    for (var key in filter_criteria) {\n      if (\n        x < Math.max(...filter_criteria[key]) &&\n        x >= Math.min(...filter_criteria[key])\n      ) {\n        group = parseInt(key);\n        break;\n      }\n    }\n\n    return group;\n  }\n\n  const { features } = featureCollection;\n\n  return {\n    type: \"FeatureCollection\",\n    features: features.map(f => {\n      const value = accessor(f);\n      const properties = {\n        ...f.properties,\n        value,\n        group: groupVar(value)\n      };\n      return { ...f, properties };\n    })\n  };\n}\n","export default async function getAsyncData(url) {\n  try {\n    let response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.json();\n  } catch {\n    return null;\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport MapGL, { Layer, Source } from \"react-map-gl\";\nimport { quarantineLayer, fillLayer } from \"./map-style\";\n\nimport groupGeojson from \"../../Utils/groupGeojson\";\nimport filterQuarantine from \"../../Utils/filterQuarantine\";\nimport getAsyncData from \"../../Utils/getAsyncData\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"./styles.css\";\n\nconst MAPBOX_API_KEY = process.env.REACT_APP_MAPBOX_API_KEY;\n\nfunction MainMap(props) {\n  const [data, setData] = useState(null);\n  const [outlines, setOutlines] = useState(null);\n  const [quarantineStatus, setQuarantineStatus] = useState(null);\n\n  const [viewport, setViewport] = useState({\n    latitude: 39,\n    longitude: -98,\n    zoom: 3.5\n  });\n\n  // initial data load\n  useEffect(() => {\n    getAsyncData(\"/get-state-geojson\").then(data => setData(data));\n\n    getAsyncData(\"/get-state-quarantines\").then(data => {\n      setQuarantineStatus(data);\n    });\n\n    getAsyncData(\"/get-quarantines-outlines\").then(data => setOutlines(data));\n  }, []);\n\n  // filtering data when date changes\n  useEffect(() => {\n    if (data) {\n      const format_date = props.displayType + \"-\" + props.date;\n\n      // fill data\n      const updatedData = Object.assign(\n        {},\n        groupGeojson(data, f => f.properties[format_date], props.displayType)\n      );\n      setData(updatedData);\n\n      // line data\n      const updatedOutlines = Object.assign(\n        {},\n        filterQuarantine(\n          outlines,\n          f => f.properties[\"state\"],\n          quarantineStatus,\n          props.date\n        )\n      );\n      setOutlines(updatedOutlines);\n    }\n  }, [props.date, props.displayType]);\n\n  //user panning\n  const _onViewportChange = viewport => {\n    setViewport({ ...viewport });\n  };\n\n  //display resort sidebar when resort icon clicked\n  const _onClick = e => {\n    if (e.features[0]) {\n      props.onClick(e.features[0][\"properties\"]);\n    }\n  };\n\n  return (\n    <div className=\"map-container\">\n      <MapGL\n        width=\"100vw\"\n        height=\"85vh\"\n        mapStyle=\"mapbox://styles/serjester/ck33r54pv2fab1crqyk8xuf89\"\n        mapboxApiAccessToken={MAPBOX_API_KEY}\n        onViewportChange={_onViewportChange}\n        onClick={event => _onClick(event)}\n        interactiveLayerIds={[\"state-layer\"]}\n        {...viewport}\n      >\n        <Source type=\"geojson\" data={data}>\n          <Layer {...fillLayer} />\n        </Source>\n        <Source type=\"geojson\" data={outlines}>\n          <Layer {...quarantineLayer} />\n        </Source>\n      </MapGL>\n    </div>\n  );\n}\n\nexport default MainMap;\n","const filter_criteria = {\n  1: \"partial\",\n  2: \"Stay at home\"\n};\n\nexport default function filterQuarantine(\n  featureCollection,\n  accessor,\n  quarantineData,\n  date\n) {\n  const filterDate = new Date(date);\n\n  function groupVar(x) {\n    // ex: x = \"Ohio\"\n    var group = 0;\n\n    if (x in quarantineData) {\n      var stateDate = quarantineData[x][\"date\"];\n\n      if (stateDate) {\n        stateDate = new Date(stateDate[0]);\n        if (stateDate <= filterDate) {\n          group = 2;\n        }\n      }\n    }\n\n    return group;\n  }\n\n  const { features } = featureCollection;\n\n  return {\n    type: \"FeatureCollection\",\n    features: features.map(f => {\n      const value = accessor(f);\n      const properties = {\n        ...f.properties,\n        value,\n        group: groupVar(value)\n      };\n      return { ...f, properties };\n    })\n  };\n}\n","import React from \"react\";\nimport \"./styles.css\";\n\nexport default function Item(props) {\n  const item_style = {\n    width: props.width,\n    height: props.height,\n    background: props.color\n  };\n\n  return (\n    <div className=\"menu-item\">\n      <div style={item_style}>&nbsp;</div>\n\n      <div className=\"menu-item-text\">{props.text}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\n\nexport default function ItemLine(props) {\n  return (\n    <div className=\"menu-item\">\n      <div className=\"item-line-container\">\n        <div className=\"item-line\">&nbsp;</div>\n      </div>\n      <div className=\"menu-item-text\">Shelter in place</div>\n    </div>\n  );\n}\n","export const all_menu_text = {\n  pct: {\n    heading: \"Doubling Time\",\n    items: {\n      item1: {\n        color: \"#f9a8a8\",\n        text: \"< 30 days\"\n      },\n      item2: {\n        color: \"#d78686\",\n        text: \"< 10 days\"\n      },\n      item3: {\n        color: \"#b66666\",\n        text: \"< 5 days\"\n      },\n      item4: {\n        color: \"#954647\",\n        text: \"< 3 days\"\n      },\n      item5: {\n        color: \"#74272a\",\n        text: \"< 1 days\"\n      }\n    }\n  },\n  cases: {\n    heading: \"Total Cases\",\n    items: {\n      item1: {\n        color: \"#f9a8a8\",\n        text: \"< 10\"\n      },\n      item2: {\n        color: \"#d78686\",\n        text: \"< 100\"\n      },\n      item3: {\n        color: \"#b66666\",\n        text: \"< 1,000\"\n      },\n      item4: {\n        color: \"#954647\",\n        text: \"< 5,000\"\n      },\n      item5: {\n        color: \"#74272a\",\n        text: \"More than 5,000\"\n      }\n    }\n  },\n  tests: {\n    heading: \"Total Tests\",\n    items: {\n      item1: {\n        color: \"#f9a8a8\",\n        text: \"< 10\"\n      },\n      item2: {\n        color: \"#d78686\",\n        text: \"< 100\"\n      },\n      item3: {\n        color: \"#b66666\",\n        text: \"< 1,000\"\n      },\n      item4: {\n        color: \"#954647\",\n        text: \"< 5,000\"\n      },\n      item5: {\n        color: \"#74272a\",\n        text: \"More than 5,000\"\n      }\n    }\n  }\n};\n","import React from \"react\";\n\nimport Item from \"./Item.jsx\";\nimport ItemLine from \"./ItemLine.jsx\";\nimport { all_menu_text } from \"./menu_text\";\nimport \"./styles.css\";\n\nexport default function Legend(props) {\n  const menu_text = all_menu_text[props.displayType];\n\n  const body = Object.values(menu_text[\"items\"]).map(item => (\n    <Item\n      key={item.color}\n      color={item.color}\n      text={item.text}\n      width=\"20px\"\n      height=\"20px\"\n    />\n  ));\n\n  return (\n    <div className=\"legend\">\n      <div className=\"heading\">{menu_text[\"heading\"]}</div>\n      <div>{body}</div>;<div className=\"heading\">Quarantine</div>\n      <ItemLine />\n    </div>\n  );\n}\n","export default function getDateStr(date) {\n  // converts date object to string YYYY-MM-DD\n  var d = String(date.getDate());\n  var m = String(date.getMonth() + 1);\n  var y = String(date.getFullYear());\n\n  var date_str = y + \"-\" + m + \"-\" + d;\n\n  return date_str;\n}\n","import React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip } from \"recharts\";\n\nimport \"./styles.css\";\nimport getGraphData from \"../../Utils/getGraphData\";\n\nconst graph_titles = {\n  pct: \"Doubling Rate\",\n  tests: \"Tests Performed\",\n  cases: \"Total Cases\",\n  deaths: \"Fatalities\"\n};\n\nexport default function Graph(props) {\n  let data = getGraphData({ ...props }, props.displayType);\n  const graph_title = graph_titles[props.displayType];\n\n  data.forEach(function(item, i) {\n    if (item[\"val\"] == 999) data[i][\"val\"] = null;\n  });\n\n  return (\n    <div>\n      <div className=\"graph-title\">{graph_title}</div>\n      <BarChart width={300} height={150} data={data}>\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"val\" fill=\"#ff8184\" />\n      </BarChart>\n    </div>\n  );\n}\n","import getDateStr from \"./getDateStr\";\n\nexport default function getGraphData(props) {\n  function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  function dateFormatter(date) {\n    const month = date.toLocaleString(\"default\", { month: \"short\" });\n    const day = String(date.getDate());\n\n    return month + \" \" + day;\n  }\n\n  var graphData = [];\n\n  console.log(props);\n\n  // need to set this to new day\n  const start_date = new Date(props.date);\n\n  for (var i = -10; i <= 0; i++) {\n    var date = addDays(start_date, i);\n\n    var date_str = props.displayType + \"-\" + getDateStr(date);\n\n    var entry = { name: dateFormatter(date), val: props[date_str] };\n\n    graphData.push(entry);\n  }\n\n  return graphData;\n}\n","import React from \"react\";\nimport { Descriptions, Modal } from \"antd\";\nimport Graph from \"./Graph\";\n\nimport \"./styles.css\";\n\nexport default function StatePopup(props) {\n  // is this dangerous , in case of missing data\n  const cases = props[\"cases-\" + props.date];\n  const tests = props[\"tests-\" + props.date];\n  const deaths = props[\"deaths-\" + props.date];\n  const doubling = props[\"pct-\" + props.date] + \" days\";\n\n  function dateHeadingFormatter(dateInput) {\n    const date = new Date(dateInput);\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const day = String(date.getDate());\n\n    return \"On \" + month + \" \" + day;\n  }\n\n  const headingTitle = dateHeadingFormatter(props.date);\n\n  return (\n    <Modal\n      footer={null}\n      visible={props.isOpen}\n      onCancel={() => props.close(false)}\n      width={370}\n      className=\"resort-popup-mobile\"\n      bodyStyle={{ padding: \"0px\" }}\n    >\n      <div className=\"state-popup\">\n        <div className=\"heading-popup\">{props.state}</div>\n        <div className=\"stats\">\n          <Descriptions\n            bordered={true}\n            size=\"small\"\n            column={1}\n            title={headingTitle}\n          >\n            <Descriptions.Item label=\"Total Cases\">{cases}</Descriptions.Item>\n            <Descriptions.Item label=\"Deaths\">{deaths}</Descriptions.Item>\n            <Descriptions.Item label=\"Total Tests\">{tests}</Descriptions.Item>\n            <Descriptions.Item label=\"Case Doubling Rate\">\n              {doubling}\n            </Descriptions.Item>\n          </Descriptions>\n        </div>\n        <div className=\"graph\">\n          <Graph {...props} date={props.date} />\n        </div>\n      </div>\n    </Modal>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport DateSlider from \".././Slider/Index\";\nimport MainMap from \".././Map/Index\";\nimport Legend from \".././Legend/Index\";\nimport StatePopup from \".././StatePopup/Index\";\nimport getTodayStr from \"../../Utils/getTodayStr\";\n\nimport { Modal } from \"antd\";\n\nimport \"./styles.css\";\nimport \"antd/dist/antd.css\";\n\nconst demo = {\n  CENSUSAREA: 113594.084,\n  GEO_ID: \"0400000US04\",\n  LSAD: \"\",\n  STATE: \"04\",\n  \"pct-2020-3-10\": 60.0,\n  \"pct-2020-3-11\": 56.0,\n  \"pct-2020-3-12\": 56.0,\n  \"pct-2020-3-13\": 56.0,\n  \"pct-2020-3-14\": 60.0,\n  \"pct-2020-3-15\": 46.0,\n  \"pct-2020-3-16\": 60.0,\n  \"pct-2020-3-17\": 64.0,\n  \"pct-2020-3-18\": 66.0,\n  \"pct-2020-3-19\": 93.0,\n  \"pct-2020-3-20\": 92.0,\n  \"pct-2020-3-4\": 200.0,\n  \"pct-2020-3-5\": 100.0,\n  \"pct-2020-3-6\": 83.0,\n  \"pct-2020-3-7\": 87.0,\n  \"pct-2020-3-8\": 70.0,\n  \"pct-2020-3-9\": 70.0,\n  pop: 72.78716999999999,\n  state_short: \"AZ\"\n};\nexport default function MapContainer(props) {\n  const [chosenStateData, setChosenStateData] = useState(null);\n\n  // FIXME change to getTodayStr()\n  const [date, setDate] = useState(\"2020-3-4\");\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const legend_style = {\n    position: \"fixed\",\n    top: props.height - 300,\n    left: \"30px\",\n    zindex: \"5\"\n  };\n\n  // opening modal when state clicked\n  function onSelect(event) {\n    setChosenStateData(event);\n    setModalOpen(true);\n  }\n\n  return (\n    <div className=\"map-container\">\n      <StatePopup\n        isOpen={modalOpen}\n        close={setModalOpen}\n        displayType={props.displayType}\n        date={date}\n        {...chosenStateData}\n      />\n\n      <div className=\"map\">\n        <MainMap\n          onClick={onSelect}\n          displayType={props.displayType}\n          isDesktop={props.isDesktop}\n          date={date}\n        />\n      </div>\n      <div className=\"slider-container\">\n        <DateSlider setDate={setDate} />\n      </div>\n      <div style={legend_style}>\n        <Legend className=\"map-legend\" displayType={props.displayType} />\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport SearchHeader from \"./Components/SearchHeader/Index\";\nimport ReactGA from \"react-ga\";\nimport MapContainer from \"./Components/MapContainer/Index\";\n\nimport useWindowDimension from \"./Utils/useWindowDimension\";\nimport checkIsDesktop from \"./Utils/checkIsDesktop\";\n\nfunction initializeReactGA() {\n  ReactGA.initialize(\"UA-154707070-1\");\n  ReactGA.pageview(\"/\");\n}\n\nfunction App() {\n  const [displayType, setDisplayType] = useState(\"pct\");\n  const { height, width } = useWindowDimension();\n  let isDesktop = checkIsDesktop(width);\n\n  initializeReactGA();\n\n  return (\n    <div>\n      <script src=\"http://localhost:8097\"></script>\n      <SearchHeader className=\"main-header\" setDisplayType={setDisplayType} />\n      <div className=\"main-content\">\n        <MapContainer\n          height={height}\n          isDesktop={isDesktop}\n          displayType={displayType}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default function checkIsDesktop(width) {\n  if (width > 600) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}